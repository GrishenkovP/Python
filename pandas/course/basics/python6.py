# **********************************************************************************************************************
# Кортежи служат для хранения нескольких объектов вместе. Их можно рассматривать как аналог списков, но без
# такой обширной функциональности, которую предоставляет класс списка. Одна из важнейших особенностей кортежей в том,
# что они неизменяемы. Удалить отдельный элемент кортежа невозможно.
# Плюс они занимают меньший объем памяти по сравнению со списками
tuple1 = (1, 2, 3)
tuple2 = (4, 5, 6)
tuple3 = tuple1 + tuple2

# Определение длины кортежа
print(len(tuple3))  # 6
print('***')

# Срез кортежа
print(tuple3[:3])  # (1,2,3)
print('***')
# **********************************************************************************************************************
# Словари (содержат ассоциативные массивы, ключи (имена) связаны со значениями (информацией). Ключи должны быть
# уникальными

# Создаем заполненный словарь
first_dict = {'one': 1, 'two': 2, 'three': 3}

# Добавление элемента
first_dict['four'] = 4
first_dict['five'] = 4
print(first_dict)  # {'one': 1, 'two': 2, 'three': 3, 'four': 4}
print('***')


# Удаление элемента
del first_dict['five']
print(first_dict)  # {'one': 1, 'two': 2, 'three': 3, 'four': 4}
print('***')

# Замена значения
first_dict.update({'one': 10})
print(first_dict)  # {'one': 10, 'two': 2, 'three': 3, 'four': 4}
print('***')

# Получить все ключи словаря
print(first_dict.keys())  # dict_keys(['one', 'two', 'three', 'four'])
print('***')

# Получить все значения словаря
print(first_dict.values())  # dict_values([10, 2, 3, 4])
print('***')

# Перебрать все пары
for x, y in first_dict.items():
    print('x = ', x, 'y = ', y)
print('***')

# Поиск значения по ключи, в случае его отсутствия - возврат установленной константы
print(first_dict.get('one', 100))  # 10
print(first_dict.get('ten', 100))  # 100
print('***')

# Метод setdefault вставляет пару ключ-значение, только если такого ключа нет
first_dict.setdefault('one', 10)
print(first_dict)  # {'one': 10, 'two': 2, 'three': 3, 'four': 4}
first_dict.setdefault('ten', 10)
print(first_dict)  # {'one': 10, 'two': 2, 'three': 3, 'four': 4, 'ten': 10}
print('***')
# **********************************************************************************************************************
# Множества это неупорядоченные наборы простых объектов. Они необходимы тогда, когда присутствие объекта в наборе
# важнее порядка или того, сколько раз данный объект там встречается
set1 = set()
set2 = {1, 2, 3, 4, 5, 6, 7}

# Добавление элементов в множество
set1.add(1)
set1.add(2)
set1.add(10)
set1.add(1)
print(set1)  # {1, 2, 10}
print('***')

# Пересечение множеств
print(set1 & set2)  # {1, 2}
print('***')

# Объединение множеств
print(set1 | set2)  # {1, 2, 3, 4, 5, 6, 7, 10}
print('***')

# Разность множеств
print(set1 - set2)  # {10}
# **********************************************************************************************************************
