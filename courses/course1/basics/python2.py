# **********************************************************************************************************************
# Условия
x = (1 == 1)  # True
a = 'b' if x else 'c'
print(a)  # b
print('***')
# **********************************************************************************************************************
val = 10
if val > 15:
    print('val > 15')
elif (val < 15) and (val > 10):
    print('10 < val < 15')
else:
    print('val<=10')  # val<=10
print('***')
# **********************************************************************************************************************
# Циклы
# Возможно использовать break для прерывания цикла
# Оператор continue используется для указания Python, что необходимо пропустить все оставшиеся команды в текущем
# блоке цикла и продолжить со следующей итерации цикла
for i in range(0, 5):
    print(i + 10)
print('***')


for i in ['a', 'b', 'c']:
    print(i)
print('***')

s = 0
n = 1
while n <= 5:
    s = s + n
    print(n, s)
    n = n + 1
print('***')

# **********************************************************************************************************************
# Функции (именованные фрагменты программного кода, к которым можно обратиться из другого места программы)
def fn1(x, y):
    return x + y

print(fn1(10, 100))  # 110
print('***')

k = 1000
def fn2():
    global k
    return k

print(fn2())  # 1000
print( '***')

def fn3(a, b=1, c=2):
    return a + b + c

print(fn3(5))  # 8
print('***')

# *********************************************************************************************************************
# Filter создает новую последовательность из исходной, применяя указанную функцию к каждому ее элементу и
# добавляя в список только те элементы, для которых функция возвращает True
def fn4(x):
    # проверка на четность
    return x % 2 == 0

for i in filter(fn4, [1, 2, 3, 4, 5, 6, 7]):
    print(i) # 2 4 6
print('***')
# **********************************************************************************************************************
#  Map создает новую последовательность из исходной, применяя указанную функцию к каждому ее элементу и
#  добавляя в список значения, которые возвращает функция
def fn5(x):
    # возвращает квадрат числа
    return x ** 2

for i in map(fn5, [1, 2, 3]):
    print(i) # 1 4	9
print('***')
# **********************************************************************************************************************
# lambda-функция (это безымянная функция с произвольным числом аргументов и вычисляющая одно выражение)
fn6 = lambda x, y: x + y
print(fn6(1, 2)) #3
print('***')

for i in map(lambda x: x ** 2, [1, 2, 3]):
    print(i)  # 1	4 9
print('***')
# **********************************************************************************************************************
# zip
for x, y in zip(['a', 'b', 'c'], [1, 2, 3]):
    print('значение = {0}, число = {1}'.format(x, y))  # значение = a, число = 1
    # значение = b, число = 2
    # значение = c, число = 3
# **********************************************************************************************************************
