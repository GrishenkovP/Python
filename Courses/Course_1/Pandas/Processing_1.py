import pandas as pd
import numpy as np

# Example 1. Чтение данных из файла-excel
path = 'dataset/data6.xlsx'
df = pd.read_excel(path, sheet_name='Лист1')
# print(df)

# **********************************************************************************************************************
# Example 2. Информация по загруженным данным
# **********************************************************************************************************************
print(df.shape) # размер загруженного массива (кол-во строк, столбцов)
print(df.columns) # наименование столбцов датафрейма
print(df.dtypes) # тип данных в столбцах таблицы
print(df.count()) # количество ненулевых значений
print(df.info()) # полный свод данных по датафрейму
# **********************************************************************************************************************
# Example 3. Базовые операции над датафреймом
# **********************************************************************************************************************
df_new = df.rename(columns={'value':'amount'}) # переименование столбцов
df_new = df.drop(['region','product'], axis=1) # удаление столбцов
df_new = df.drop([0,1,2], axis=0) # удаление строк по индексу
df_new = df.reset_index() # сбросить индекс
df_new = df.set_index('date') # назначить новый индекс-столбец
df_new = df.sort_values(['value','product']) # сортировка датафрейма по определенным столбцам (полям)
df_new = df.sort_values(['value','product'],ascending=[False, True]) # сложный вариант сортировки значений
print(df_new)
# **********************************************************************************************************************
# Example 4. Получение среза данных
# **********************************************************************************************************************
print(df.head(5)) # получение первых 5 строк
print(df.tail(5)) # получение последних 5 строк
print(df.nlargest(5,'value')) # получение п-строк в отсортированном массиве
print(df.nsmallest(5, 'value')) # получение n-строк в отсортированном массиве

print(df[df['region']=='A']) # выделение строк согласно логическому условию
print(df[df.region.isin(['A','B'])]) # выделение строк согласно логическому условию
print(df[(df['region']!='A') & (df['product']=='AAA')]) # выделение строк согласно логическому условию

print(df.loc[0:5,'region':'value']) # выделение массива из датафрейма. Используются имена
print(df.loc[df['region']=='A']) # выделение массива из датафрейма. Используются имена
print(df.iloc[0:5, 1:4]) # выделение массива из датафрейма. Используются срезы. Первый столбец 0 номер
# **********************************************************************************************************************
# Example 5. Добавление расчетного столбца к датафрейму
# **********************************************************************************************************************
df_new= df.loc[:] #создаем копию датафрейма
df_new['value_2'] = df_new['value']*0.1 # вариант 1

def fnNewColumn(x):
    return x**2
df_new['value_3'] = df_new['value'].apply(fnNewColumn) # вариант 2

# Аналогия с общим Python
my_list=[1,2,3]
def fnNewVal(x):
    return x**2
my_list_2 = list(map(fnNewVal, my_list))
print(my_list_2)

df_new['value_4'] = df_new['value'].apply(lambda x:x**2) # вариант 3

df_new['value_5'] = np.where(df_new['value_4']>500,1,0) # вариант 4

print(df_new)
# **********************************************************************************************************************
# Базовые арифметические функции
# **********************************************************************************************************************
print(len(df['value'])) # подсчет длины ряда значений
print(df['value'].sum()) # сумма значений по столбцу
print(df['value'].count()) # количество значений
print(df['value'].nunique()) # подсчет количества уникальных значений (суммарно)
print(df['value'].value_counts()) # подсчет количества каждого уникального значения в столбце
print(df['value'].unique()) # не арифметика, но около темы - вывод списка только уникальных значений
print(df['value'].value_counts(1)) # доля каждого уникального значения в столбце
print(df['value'].max()) # поиск максимального значения
print(df['value'].min()) # поиск минимального значения
print (df['value'].mean()) # среднее значение по выборке
print(df['value'].median()) # вычисление медианы
print(df['value'].mode()) # вычисление моды
print(df['value'].describe()) # описательные статистики
df['value_2'] = df['value'].cumsum() # накопительный итоги по колонке
print(df)
# **********************************************************************************************************************
